==================
Table query
==================

AzureDiagnostics;

---

(source_file
  (tabular_expression
  (source
    (identifier))))

==================
Table expression query
==================

AzureDiagnostics
| project timestamp, second
| order by timestamp

---

    (source_file
      (tabular_expression
        (source
          (identifier))
        (operation
          (pipe)
          (operator)
          (identifier)
          (identifier))
        (operation
          (pipe)
          (operator)
          (identifier))))

==================
Table where query
==================

AzureDiagnostics
| where timestamp == '2023-10-15'

---

(source_file
  (tabular_expression
    (source
      (identifier))
    (operation
      (pipe)
      (operator)
      (binary_expression
        (identifier)
        (string)))))


==================
let statement
==================

let expect_pipelines = AzureDiagnostics;
expect_pipelines

---

(source_file
  (let_statement
    (let_keyword)
    (identifier)
    (tabular_expression
      (source
        (identifier))))
    (tabular_expression
      (source
        (identifier))))


==================
let dynamic
==================

let Status = dynamic([ 'Failed', 'TimedOut']);
AzureDiagnostics

---

    (source_file (let_statement
        (let_keyword)
        (identifier)
        (function_call
          (identifier)
          (function_arguments
            (array
              (string)
              (string)))))
      (tabular_expression
        (source
          (identifier))))

==================
let datatable
==================

let tabular = datatable(var1: string, var2: int)['x', 1, 'y', 2];
tabular

---

    (source_file
      (let_statement
        (let_keyword)
        (identifier)
        (datatable
          (datatable_function)
          (typed_parameter
            (identifier)
            (type))
          (typed_parameter
            (identifier)
            (type))
          (array
            (string)
            (number)
            (string)
            (number))))
      (tabular_expression
        (source
          (identifier))))

==================
multiple where clauses
==================

AzureDiagnostics
| where 1==1
    and ResourceProvider == 'MICROSOFT.DATAFACTORY'
    and Category == 'PipelineRuns'
    and pipelineName_s in (expect_pipelines)
    and true

---

    (source_file
      (tabular_expression
        (source
          (identifier))
        (operation
          (pipe)
          (operator)
          (compound_expression
            (binary_expression
              (number)
              (number))
            (compound_keywords)
            (binary_expression
              (identifier)
              (string))
            (compound_keywords)
            (binary_expression
              (identifier)
              (string))
            (compound_keywords)
            (binary_expression
              (identifier)
              (binary_operator)
              (identifier))
            (compound_keywords)
            (bool)))))

==================
assignment operator
==================

AzureDiagnostics
| extend statusNum = array_index_of(Status, status_s), status[index]

---

    (source_file
      (tabular_expression
        (source
          (identifier))
        (operation
          (pipe)
          (operator)
          (assignment
            (identifier)
            (function_call
              (identifier)
              (function_arguments
                (identifier)
                (identifier))))
          (property_index
            (identifier)
            (identifier)))))

==================
join query
==================

AzureDiagnostics
| join kind=inner (AzureDiagnostics) on $left.col1 == $right.col2
| join kind=inner AzureDiagnostics on col1

---

(source_file
  (tabular_expression
    (source
      (identifier))
    (operation
      (pipe)
      (join_operator)
      (join_operator)
      (join_types)
      (tabular_expression
        (source
          (identifier)))
      (sub_operator)
      (binary_expression
        (property_identifier
          (identifier)
          (identifier))
        (property_identifier
          (identifier)
          (identifier))))
    (operation
      (pipe)
      (join_operator)
      (join_operator)
      (join_types)
      (source
        (identifier))
      (sub_operator)
      (identifier))))

==================
let function
==================
let parse_result = (resultCode: int) {
  case(
    resultCode == -2, 4h/1ms,
    strcat('Unknown resultcode: ', resultCode)
  )
};

---

    (source_file
      (let_statement
        (let_keyword)
        (identifier)
        (func
          (typed_parameter
            (identifier)
            (type))
          (function_call
            (identifier)
            (function_arguments
              (binary_expression
                (identifier)
                (number))
              (binary_expression
                (timespan
                  (number))
                (timespan
                  (number)))
              (function_call
                (identifier)
                (function_arguments
                  (string)
                  (identifier))))))))

==================
extend assign binary
==================

AzureDiagnostics
| extend
  running_duration = now(),
  max_duration_before_timeout=4h/1ms;

---

    (source_file
      (tabular_expression
        (source
          (identifier))
        (operation
          (pipe)
          (operator)
          (assignment
            (identifier)
            (function_call
              (identifier)))
          (assignment
            (identifier)
            (binary_expression
              (timespan
                (number))
              (timespan
                (number)))))))

==================
mv-apply
==================

// comment
AzureDiagnostics
| mv-apply c1_trace = c1_drilldown.c1_traces to typeof(dynamic) on (
    where func().message contains 'data'
    | project var
);

---

    (source_file
      (comment)
      (tabular_expression
        (source
          (identifier))
        (operation
          (pipe)
          (mv_apply_operator)
          (assignment
            (identifier)
            (property_identifier
              (identifier)
              (identifier)))
          (to_operator)
          (type_cast_function)
          (type)
          (sub_operator)
          (operator)
          (binary_expression
            (property_identifier
              (function_call
                (identifier))
              (identifier))
            (binary_operator)
            (string))
          (operation
            (pipe)
            (operator)
            (identifier)))))


==================
range operator
==================

range expect_run_timestamp
        from toscalar(health_runs | summarize min(run_timestamp))
        to datetime_add('hour', 2, toscalar(health_runs | summarize max(run_timestamp)))
        step 1h
    | summarize by bin(expect_run_timestamp, 1h)

---

    (source_file
      (tabular_expression
        (range_operation
          (range_operator)
          (identifier)
          (range_operator)
          (to_scalar_call
            (to_scalar_function)
            (tabular_expression
              (source
                (identifier))
              (operation
                (pipe)
                (operator)
                (function_call
                  (identifier)
                  (function_arguments
                    (identifier))))))
          (to_operator)
          (function_call
            (identifier)
            (function_arguments
              (string)
              (number)
              (to_scalar_call
                (to_scalar_function)
                (tabular_expression
                  (source
                    (identifier))
                  (operation
                    (pipe)
                    (operator)
                    (function_call
                      (identifier)
                      (function_arguments
                        (identifier))))))))
          (range_operator)
          (timespan
            (number)))
        (operation
          (pipe)
          (operator)
          (sub_operator)
          (function_call
            (identifier)
            (function_arguments
              (identifier)
              (timespan
                (number)))))))

==================
union operator
==================

p1b_exceptions
| union(p1a_exceptions)

---

    (source_file
      (tabular_expression
        (source
          (identifier))
        (operation
          (pipe)
          (operator)
          (identifier))))
